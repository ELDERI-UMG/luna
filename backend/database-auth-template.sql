-- ============================================================================
-- PLANTILLA DE AUTENTICACI√ìN PARA NUEVOS PROYECTOS
-- Compatible con la estructura del proyecto Luna
-- ============================================================================

-- Habilitar extensiones necesarias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================================================
-- TABLA USERS (Autenticaci√≥n)
-- ============================================================================

CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255), -- NULL si usa Google OAuth
    google_id VARCHAR(255) UNIQUE, -- Para autenticaci√≥n con Google
    profile_picture VARCHAR(500), -- URL de foto de perfil de Google
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- √çndices para optimizaci√≥n
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_google_id ON users(google_id);

-- ============================================================================
-- COMENTARIOS DE LOS CAMPOS
-- ============================================================================

COMMENT ON TABLE users IS 'Tabla de usuarios para autenticaci√≥n';
COMMENT ON COLUMN users.id IS 'ID √∫nico del usuario';
COMMENT ON COLUMN users.username IS 'Nombre completo del usuario';
COMMENT ON COLUMN users.email IS 'Email √∫nico del usuario';
COMMENT ON COLUMN users.password IS 'Hash de contrase√±a (bcrypt) - NULL para usuarios de Google OAuth';
COMMENT ON COLUMN users.google_id IS 'Google ID para autenticaci√≥n OAuth';
COMMENT ON COLUMN users.profile_picture IS 'URL de la foto de perfil del usuario';

-- ============================================================================
-- DATOS DE PRUEBA (OPCIONAL - ELIMINAR EN PRODUCCI√ìN)
-- ============================================================================

-- Usuario de prueba con email/password
-- Email: test@example.com
-- Password: test123
-- Hash generado con bcrypt (10 rounds)
INSERT INTO users (username, email, password, created_at)
VALUES (
    'Usuario de Prueba',
    'test@example.com',
    '$2a$10$YrNkxQjfzKvH0QhGKpWlH.qnX8ZGvQJKFKVQzKYzFQYzKYzKYzKYz',
    NOW()
) ON CONFLICT (email) DO NOTHING;

-- ============================================================================
-- TABLAS ADICIONALES PARA TU PROYECTO
-- Agrega aqu√≠ las tablas espec√≠ficas de tu nuevo proyecto
-- ============================================================================

-- Ejemplo: Tabla de productos
-- CREATE TABLE products (
--     id BIGSERIAL PRIMARY KEY,
--     name VARCHAR(255) NOT NULL,
--     description TEXT,
--     price DECIMAL(10,2) NOT NULL,
--     image_url VARCHAR(500),
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ DEFAULT NOW()
-- );

-- Ejemplo: Tabla de pedidos
-- CREATE TABLE orders (
--     id BIGSERIAL PRIMARY KEY,
--     user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
--     total DECIMAL(10,2) NOT NULL,
--     status VARCHAR(50) DEFAULT 'pending',
--     created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
--     updated_at TIMESTAMPTZ DEFAULT NOW()
-- );

-- ============================================================================
-- NOTAS DE IMPLEMENTACI√ìN
-- ============================================================================

/*
‚úÖ ESTRUCTURA COMPATIBLE CON EL PROYECTO ACTUAL

Este script crea la tabla 'users' compatible con:
- SupabaseUserRepository.js
- Autenticaci√≥n con email/password (bcrypt)
- Autenticaci√≥n con Google OAuth
- Sistema de JWT tokens

üìã CAMPOS DE LA TABLA USERS:
- id: Identificador √∫nico autoincrementable
- username: Nombre del usuario (mapea a user.name en el c√≥digo)
- email: Email √∫nico (usado para login)
- password: Hash bcrypt (NULL para usuarios de Google)
- google_id: ID de Google para OAuth
- profile_picture: URL de la foto de Google
- created_at: Fecha de creaci√≥n
- updated_at: Fecha de √∫ltima actualizaci√≥n

üîê FLUJO DE AUTENTICACI√ìN:

1. REGISTRO CON EMAIL:
   POST /api/auth/register
   Body: { name, email, password }
   ‚Üí Crea usuario con password hasheado

2. LOGIN CON EMAIL:
   POST /api/auth/login
   Body: { email, password }
   ‚Üí Verifica password y retorna JWT token

3. LOGIN CON GOOGLE:
   POST /api/auth/google-login
   Body: { googleUser: { id, email, name, picture } }
   ‚Üí Crea/actualiza usuario con google_id

üì¶ PASOS PARA USAR ESTA PLANTILLA:

1. Ejecuta este SQL en tu proyecto Supabase:
   - Ve a SQL Editor en Supabase Dashboard
   - Copia y pega este script
   - Click en "Run"

2. Verifica que se cre√≥ la tabla:
   - Ve a Table Editor
   - Deber√≠as ver la tabla "users"

3. Actualiza .env (ya lo hiciste):
   ‚úÖ SUPABASE_URL=https://jipiioluictohoxnszfp.supabase.co
   ‚úÖ SUPABASE_ANON_KEY=...
   ‚úÖ SUPABASE_SERVICE_ROLE_KEY=...
   ‚úÖ JWT_SECRET=...

4. Actualiza frontend/config/supabase-config.js (ya lo hiciste):
   ‚úÖ url: 'https://jipiioluictohoxnszfp.supabase.co'
   ‚úÖ anonKey: '...'

5. Instala dependencias:
   npm install

6. Inicia el servidor:
   npm run dev

7. Prueba la autenticaci√≥n:
   - Registro: POST http://localhost:3000/api/auth/register
   - Login: POST http://localhost:3000/api/auth/login
   - Google: Usa el bot√≥n de Google en el frontend

üéØ AGREGAR TUS PROPIAS TABLAS:

Despu√©s de la tabla users, agrega tus tablas personalizadas con:
- BIGSERIAL PRIMARY KEY para IDs
- TIMESTAMPTZ para fechas
- Referencias a users: REFERENCES users(id) ON DELETE CASCADE
- √çndices para campos que uses en b√∫squedas

Ejemplo:
CREATE TABLE mi_tabla (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,
    nombre VARCHAR(255) NOT NULL,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_mi_tabla_user ON mi_tabla(user_id);

*/
